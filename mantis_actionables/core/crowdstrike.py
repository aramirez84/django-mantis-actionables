import csv
import datetime
import pprint

from mantis_actionables.models import Action, ImportInfo, SingletonObservable, Source


# maps crowdstrike types to internal types (key = crowdstrike type, value = internal type)
crowdstrike_type_map = {
    'domain': 'internal_domain',
}


def import_crowdstrike_csv(csv_file):

    # get namespace for crowdstrike csv import
    crowdstrike_namespace = 1

    # create an action for this import
    action = Action(comment='Autogenerated via crowdstrike csv import')

    for row in read_crowdstrike_csv_generator(csv_file):
        pprint.pprint(row)

        # create import infos and sources
        sources = []
        for report in row['actor']:
            # get the actor obj and the related source
            import_info, _ = ImportInfo.objects.get_or_create(
                creating_action=action,
                uid='crowdstrike_actor_%s' % report,
                namespace=crowdstrike_namespace,
                name='Crowdstrike Actor: %s' % report,
                description='Autogenerated via crowdstrike csv import',
                related_threatactor=''
            )
            source, _ = Source.objects.get_or_create(
                import_info=import_info,
                origin=Source.ORIGIN_EXTERNAL,
                processing=Source.PROCESSED_AUTOMATICALLY,
                tlp=Source.TLP_UNKOWN
            )
            sources.append(source)

        for report in row['report']:
            # get the report obj and the related source
            import_info, _ = ImportInfo.objects.get_or_create(
                creating_action=action,
                uid='crowdstrike_report_%s' % report,
                namespace=crowdstrike_namespace,
                name='Crowdstrike Report: %s' % report,
                description='Autogenerated via crowdstrike csv import',
                related_threatactor=''
            )
            source, _ = Source.objects.get_or_create(
                import_info=import_info,
                origin=Source.ORIGIN_EXTERNAL,
                processing=Source.PROCESSED_AUTOMATICALLY,
                tlp=Source.TLP_UNKOWN
            )
            sources.append(source)

        # create singleton observable
        # singleton_observable = SingletonObservable()
        # singleton_observable.type = ''
        # singleton_observable.subtype = ''
        # singleton_observable.value = ''
        # singleton_observable.sources = ''
        # singleton_observable.save()
        # set actor sources
        # set report sources

        # create status?



def read_crowdstrike_csv_generator(csv_file):
    with open(csv_file) as handle:
        reader = csv.DictReader(handle)
        for row in reader:
            """
            csv file has the following columns:
            date - string (d.m.Y)
            indicator - string
            type - string
            actor - list of actors, seperated by |
            report - list of reports, seperated by |
            domaintype - string
            """
            # split actor string and filter "empty" values
            actor_empty_values = ['unknown', 'none', ]
            actors = []
            for actor in row['actor'].split('|'):
                if actor.strip() and actor.lower() not in actor_empty_values:
                    actors.append(actor)
            row['actor'] = actors

            # split report string and filter "empty" values
            report_empty_values = ['unknown', 'none', ]
            reports = []
            for report in row['report'].split('|'):
                if report.strip() and report.lower() not in report_empty_values:
                    reports.append(report)
            row['report'] = reports

            # skip entry if there is no actor and no report
            if not row['actor'] and not row['report']:
                continue

            # change date to a Date obj
            row['date'] = datetime.datetime.strptime(row['date'], '%Y-%m-%d').date()

            # map type to internal types that already exist
            if row['type'] in crowdstrike_type_map:
                row['type'] = crowdstrike_type_map[row['type']]

            yield row